/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/current-user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get the current user. If there is no logged user (header or cookie), it returns an empty object */
    get: operations['AuthController_currentUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Login with email and password */
    post: operations['AuthController_loginWithPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Delete the JWT from the cookies */
    post: operations['AuthController_logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Use this API action to list users */
    get: operations['UsersController_list']
    put?: never
    /** @description Use this API action to create a new user */
    post: operations['UsersController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Use this API action to get a single user */
    get: operations['UsersController_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/server/health-check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Health check */
    get: operations['ServerController_healthCheck']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    UserDto: {
      /**
       * @description User ID
       * @example 123
       */
      id: string
      /**
       * @description Email of the user
       * @example john.doe@example.com
       */
      email: string
      /** @description Role name the user has */
      role: string
    }
    CurrentUserResponseDTO: {
      /** @description User information */
      user: components['schemas']['UserDto']
    }
    LoginWithPasswordParamsDto: {
      /**
       * @description Email of the user
       * @example john.doe@example.com
       */
      email: string
      /**
       * @description Password of the user
       * @example securePassword123
       */
      password: string
      /**
       * @description Whether to return the token in the response. An error will be thrown if no origin header is provided and returnToken is false
       * @example true
       */
      returnToken: boolean
    }
    LoginWithPasswordResponseDto: {
      /**
       * @description JWT token for authentication. Only returned if returnToken is true
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      token: string
    }
    UsersListResponseDto: {
      users: components['schemas']['UserDto'][]
      /**
       * @description Total number of users matching the criteria
       * @example 100
       */
      total: number
    }
    UserGetResponseDto: {
      user: components['schemas']['UserDto']
    }
    UsersCreateParamsDto: {
      /**
       * @description Email of the user
       * @example john.doe@example.com
       */
      email: string
      /**
       * @description Password of the user
       * @example securePassword123
       */
      password: string
      /**
       * @description Role of the user
       * @example user
       * @enum {string}
       */
      role: 'user' | 'admin'
    }
    UsersCreateResponseDto: {
      user: components['schemas']['UserDto']
    }
    HealthCheckResponseDto: {
      /**
       * @description The overall status of the system
       * @enum {string}
       */
      status: 'healthy' | 'unhealthy'
      /** @description Status of individual services */
      services: Record<string, never>
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AuthController_currentUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Only if cookie is not set to true */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CurrentUserResponseDTO']
        }
      }
    }
  }
  AuthController_loginWithPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginWithPasswordParamsDto']
      }
    }
    responses: {
      /** @description Login successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LoginWithPasswordResponseDto']
        }
      }
    }
  }
  AuthController_logout: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsersController_list: {
    parameters: {
      query?: {
        /** @description The index of the first element to return */
        from?: number
        /** @description The number of elements to return */
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of users with their groups and connected accounts */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UsersListResponseDto']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsersController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UsersCreateParamsDto']
      }
    }
    responses: {
      /** @description User created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UsersCreateResponseDto']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsersController_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User with their groups and connected accounts */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserGetResponseDto']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ServerController_healthCheck: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description All services are healthy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HealthCheckResponseDto']
        }
      }
      /** @description One or more services are unhealthy */
      503: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
